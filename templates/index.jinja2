{% extends "root.jinja2" %}

{% block title %}Home{% endblock %}

{% block content %}

  <div class="row">
    <div class="col-sm-6">
      <div class="card">
        <div class="card-header">
          <label class="mb-0" for="int_display">Integers</label>
        </div>
        <div class="card-body">
          <!-- integer display -->
          <textarea id="int_display" class="form-control bg-dark text-white border-white" disabled
                    rows="10"></textarea>
        </div>
      </div>
    </div>
    <div class="col-sm-6 mt-4 mt-sm-0">
      <div class="card">
        <div class="card-header">
          <label class="mb-0" for="bool_display">Booleans</label>
        </div>
        <div class="card-body">
          <!-- boolean display -->
          <textarea id="bool_display" class="form-control bg-dark text-white border-white" disabled
                    rows="10"></textarea>
        </div>
      </div>
    </div>
  </div>

  <div class="card mt-4">
    <div class="card-header">
      <ul class="nav nav-tabs card-header-tabs" id="logNavBar">
        <li class="nav-item">
          <p class="nav-link active mb-0" onclick="console.log('clicked')"> First </p>
        </li>
        <li class="nav-item">
          <p class="nav-link mb-0" onclick="console.log('clicked2')"> Second </p>
        </li>
      </ul>
    </div>
    <div class="card-body">
      <!-- console display -->
      <textarea id="out_display" class="form-control bg-dark text-white border-white" disabled
                rows="15"></textarea>

      <!-- console toolbar -->
      <div class="btn-toolbar mt-2" role="toolbar">
        <!-- auto scroll button -->
        <div class="col-auto ml-auto px-0">
          <button id="in_autoScroll" type="button" data-toggle="button" class="btn btn-outline-primary active">
            Auto Scroll
          </button>
        </div>
      </div>

    </div>
  </div>
{% endblock %}

{% block extra_js %}
  <script>
    $(function () {
      // select page objects
      const $outDisplay = $('#out_display');
      const $inAutoScroll = $('#in_autoScroll');
      const $boolDisplay = $('#bool_display');
      const $intDisplay = $('#int_display');
      const $heart = $('#heart');
      var logStreams = {'misc':''};
      var sentTime = "";

      // connect to stream
      const xhr = new XMLHttpRequest();
      xhr.open('GET', '{{ url_for('console_stream') }}');
      xhr.send();
      let position = 0;

      // update outDisplay with character limit
      function updateOutDisplay(newText, limit = 2048) {
        let currentText = $outDisplay.val();
        $outDisplay.val(currentText.substring(currentText.length - limit) + newText);

        if ($inAutoScroll.hasClass('active'))
          $outDisplay.scrollTop($outDisplay[0].scrollHeight);
      }

      function connectionAlive(deltaSeconds = 1) {
        sentTimeSeconds = sentTime.split(':');
        sentTimeSeconds = (sentTimeSeconds[0]*3600)+(sentTimeSeconds[1]*60)+Number(sentTimeSeconds[2]);

        let dateObj = new Date();
        let recievedTimeSeconds = (dateObj.getHours()*3600)+(dateObj.getMinutes()*60)+dateObj.getSeconds();

        return recievedTimeSeconds - sentTimeSeconds < deltaSeconds;
      }

      // update display, with delay
      function update() {
        let messages = xhr.responseText.split('\n');
        messages.slice(position, -1).forEach(function (value) {

          // split the sensor data by semicolon
          const sensorData = value.split(';');

          // First element should be time stamp
          let data = sensorData[0].split(',');
          sentTime = data[1];

          // Dead connection
          if (data[0] == "time" && !connectionAlive(2)) {
            console.log("dead\n");
            heart.classList.remove("alive");
            return;
          }
          heart.classList.add("alive");

          // clear the displays
          $intDisplay.val('');
          $boolDisplay.val('');

          // iterate through sensor data
          sensorData.forEach( interpretData );
        });
      }

      function interpretData(dataString) {
        if (dataString.trim().length < 1) return; // empty or whitespace

        // split sensor data by comma
        const data = dataString.split(',');

        // Skip time stamp data
        if (data[0] == "time") return;

        // is this actual data? (should have 4 values)
        if (data.length > 3) {

          if (data[1] === 'num') {
            // number data
            $intDisplay.val($intDisplay.val() + data[0] + ': ' + data[2] + ' ' + data[3] + '\n');

          } else if (data[1] === 'bool') {
            // boolean data
            $boolDisplay.val($boolDisplay.val() + data[0] + ': ' + data[2] + ' ' + data[3] + '\n');

          } else {
            // Log data
            interpretLogData(data);
            {# updateOutDisplay(data[0] + ' [' + sentTime + ']: ' + data[2] + '\n'); #}
          }

        } else if (data.length > 0) {
          // wasn't actual data, just output string
          updateOutDisplay(dataString + '\n');
        }
      }

      function interpretLogData(data, sentTime, limit = 2048) {
        let key = data[0];

        // Does not have key or nav pill yet
        if (!logStreams.hasOwnProperty(key)) {
          logStreams[key] = "";
          let logNavBar = document.getElementById("logNavBar");
          let newNavPill = logNavBar.lastChild.cloneNode();

          newNavPill.contentText = key;
          logNavBar.appendChild(newNavPill);
        }
        
        // Concat old and new data
        let value = logStreams[key] + '[' + sentTime + ']: ' + String(data[2]) + '\n';
        // Store only the 'limit' number of characters
        logStreams[key] = value.substring(value.length - limit);
      }

      setInterval(function () {
        // update the displays
        update();
      }, 250);
    });
  </script>
{% endblock %}
